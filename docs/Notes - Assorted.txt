LARGE TODOs:
-+ Query Page, Greeting/About Page
-+ > Look in to how to render other pages.
Load
-+ Load (cautions for 'sure?'), prompts, validates, then (success: loads, goes to main page, fail: fails, displays alert)
-+ New, clears Cube.
Save Page
-+ Instructions, TextArea, JSON-indented.
-+ Validate button.
Table CSS (See 'Discussion' below)
Auto-Complete [http://full360solutions.github.io/angularjs-typeahead-dropdown/#/]
Pagination

-----------------------------------------------------------------------------
Cleanup:
-Prompt for 'Sure' on Load / New.

-End-to-End assurance of integrity of Cube object.
-Validation on function input where appropriate.
-Column / Cell / Row limits.
-Validation on all entry fields.
-Messages on Start Page.
-'Main Alert' lightbox.

-Revisit Edit Grid:
  Add-Column rollout panel.
  Collapse Row-Delete, Add-Column columns.
  Table x-y plugin. (Headers, New-Row, Row-Delete Column, Add-Column sticky) [http://joshondesign.com/2015/05/23/csstable]

-----------------------------------------------------------------------------

Node:
-Web Page: Intro, New User / Login - OGR app behind login wall.
-Authentication System (Single Administrator (me), user signup (subject to approval))
-Database (to store OGR files)
-Node Endpoints (to handle authentication, to deliver OGR app, OGR Cubes from Database)

OGR finals
- Page to load OGR Cubes from server
- Save/Load/New-from-server front-points
- Logged-In-As FNFs

Finals
- Register Domain Name
- Upload all to domain
- Thoroughly Test.
- Deep-Comb for useful features, validation.

Fun TODOs:
JS / NG:
Rename button on Columns.
Save Timer.
Value-Mass-Change / Value Coalesce feature.
Drag-and-drop rows / columns.
CSS:
Remove ALL 'Mobile' functionality from BS - smallest screen size supported is screen-md.
CSS overhaul.


-----------------
-- DISCUSSIONS --
-----------------

----------------------
Ideal UI for Edit Grid

Table Scroll
> Delete Column frozen.
> Header column stays upon vertical scroll, tracks upon horizontal scroll.
So, that means:
> Main 'Data' Cells scroll horizontally and vertically as a group.

New Column:
> Fixed New Column popout [wherever appropriate]. Click, fixed dialog comes up. Enter column name, submit. Column added and closed. Error? Error displayed in box. Clickoff? Close.

New Row:
> Fixed to bottom.

Value Tiles:
> Open: Displayed As-Is, up to max (with tooltip)
> Closed: Displayed All-Equal.

Table Generals:
> Open Vs Closed State infrastructure.
> Draggable Columns
> Draggable Rows
> Pagination at bottom
> Resizable Columns (to min, max)
> No 'Delete' or 'Add' buttons - all done with Clicks-and-Keys
> Properly-colored Phantom Tooltips ("Ctrl + Left Click to Delete", "Enter to Add Value") to indicate actions that replace buttons.

------------------------
Edit Grid CSS Todo list:

https://www.smashingmagazine.com/2013/03/customizing-bootstrap/
https://bootstrapbay.com/blog/customize-bootstrap/

Figure out what borders BS puts on tables / rows / in-vs-out-of-container, etc.
Figure out TypeFace inheritance tree.

Table: Investigate padding, margins.
Header Cells: Investigate padding, margins.
Header Cells: Dividers between - square.
Header Cells: Delete Floated right.
Header Cells: Content Centered Vertically
Header Cells: Fixed width - enough for two tile cells per row in 'closed' mode.

Delete-Row Column: Width to size of buttons.
Delete-Row Column: Centered Vertically

Value Cells: Put padding in between tiles.
Value Cells: Change to button-groups.
Value Cells: Max width - width to fit inside column. Tooltip.
Value Cells: New-Value input (Either | Floated to bottom | OR | last value tile in stack)

New-Item Row: Change "new item" to look like text / message, not a button.

Delete-Row Column: Beautify.
Value Cells: Beautify - remove padding inside value tiles, add margin to outside. Typeface. Make buttons attractive.
Header Cells: Beautify.
Colors: Add simple colors to beautify.

TODO: Value Cells (Closed State): (On Hold)
Value Cells (Closed): No Delete Buttons Per Value Tile.
Value Cells (Closed): No New-Value input field.
Value Cells (Closed): Static Value Tile width: Two tiles per row - tooltips to see full value.
Value Cells (Closed): Grey'd Out.
Value Cells (Closed): Either | Vertically shrunk to two lines | OR | bar across bottom of row to expand.

--------------------------------
Hotkeys for Cell Value deletion:

One of the things I find most annoying in OGR is the little X-boxes, cluttering *every god-damned* value in every GD cell.

It may be wise to allow teh User to hold down a button as they click, to indicate a deletion. Ctrl+left-click would be great.

ON THIS NOTE:
Within the Cell-level repeat, I could eliminate the clutter of add-value boxes by reducing them to a ng-show/hide bar, which summons the textarea when clicked.
Having said that, it might be a pain in the ass to make a Service or a Emit/Broadcast system to keep only one of these textareas open at a time.

-----------
Validation:

Upon loading, the following things should be checked:
- File is in JSON format.
- File is in OGR format (hierarchical structure).
- OGR Format (All OGR Object properties are of the same order / spelling)

------------------------------
Save/Load Mechnisms revisited:

Okay, fucking great - there is a way to Load files in ECMA/HTML, but there is no native way to save them... and the only workaround method - Eli Grey's "FileSaver" Git - does not allow the input of custom names for anything but specialty versions of Chrome.
So... It would be great to have a simple Save/Load-enabled client-side version of OGR, but considering I am going to power straigth through to a server-connected version, I will stop trying to create my pie-in-the-sky Client-Side-Only version, and create a backup plan.

So, 'Save' workflow will be reworked as such:
There will be an additional 'Save' page, which will merely be a large TextArea with the entire Cube displayed (and formatted) within it.
Simple instructions on the page will inform the user that in order to save the file, they should copy the entire textarea, and paste it into a (formatted?) .txt file of their desired naming.

The same Validation Rules will apply to this textarea - it will be JSON-validated, and OGR-validated.
Validate Button / Auto-Validate with delay.

---------------------
Save/Load Mechanisms:

Enter Start Page
> [No Cube]
> (New, Load, Close) Buttons Available - No Path

New
> (Prompts For Save)
> Erases Cube, Erases Save Path, Takes to Edit Grid.
> Start Page - (New, Load, Save, Close) buttons available - No Path

Save
> (Validates), Prompts, Saves to Location, Overwrites SavePath
> Start Page - (New, Load, Save, Close) buttons available - Path displayed.

Load
> (Prompts For Save)
> Prompts, Opens from Location, Overwirtes SavePath, (Validates), Overwrites Cube, Goes to Edit Grid
> Start Page - (New, Load, Save, Close) Buttons available - Path Displayed

Close
> (Prompts For Save)
> Exits

----------
CSS Todos:

 EZ
 > Min, max value button width
 > Min, Max column width
 > Static width for 'New Row' boxes, 'New Column' box.
 > Minimum width for 'New Value' boxes.
 Hard
 > Custom padding on buttons - fewer / smaller gutters
 > Custom padding on tables
 Project
 > Figure out proper BS item nesting, especially RE: tables
 > Figure out button padding - why is the button staking right next to the text?

-----------
CSS Ideals:

- Columns Max Width. Tooltip for large names.
- Modified Tile Inner, Outer gutters.
 > Two States for Rows: 'Active (clicked)' and 'Inactive (Clicked off)'
 Inactive:
  - Value Tile Max Width - maybe two per row.
  - Overflow in Value Tiles Ellipsis'd, Tooltip'd
  - Value tiles limited to 2 (?) rows.
  - Enter Button Hidden.
  - Value-Tile Delete buttons hidden.
 Active:
  - All Value Tiles expanded. Delete Buttons visible.
  - Overflowed Value Tiles Ellipsis'd, Tooltip'd.
  - Add-Value Tiles Visible. Floated-bottom, if possible.
Later: If possible, have different directives for 'Active' and 'Inactive' rows, and swap on-the-fly.


--------------------------------
Fanciful CSS "BOWBS" Discussion:

Watching Blasting Off With Bootstrap ("BOWBS"):

There is no need for centering or styling, i.e. "container" class.
The point of Organiz-r is to manage large amounts of tabular data.
Therefore, i imagine its UI being as expansive as possible... well-colored, clean, attractive, etc... but at the same time, clear, uncluttered, and as *Large* as possible.
Chrome (for the sake of Resume Ahhhs) can go in menus, etc.
Might be cool to make said menus VERY boot-strapish - maybe 'Linear' / 'Technological' / 'Mirror's edge-ish' menus? Think Less-Rounded buttons, dog-eared buttons, and Tesla-Motors-Ish script.

Thinking: Collapsible Menu Bar, settings / Other Modes (edit vs Search) / Help via symbols in bar.
Any non-gridspace modes should be done via models, which lightbox over the current gridspace.


-----------------------
<ng-repeat> Discussion:

Solutions:
Seems like the Add Value/ Delete value buttons need to be added by some kind of function at-point-in-time.
ng-if is the best solution, and yet even it falls short - putting an ng-if at each point where a control would be required would just create another watch, which fails to achieve the goal os *eliminating* watches.

So, i can have the table rendered with typical NG-repeats. However, each Row will be a directive:
The Directive will 'summon' one of two templates via a technique similar to this: http://onehungrymind.com/angularjs-dynamic-templates/
... only click-based, and not preset-template-fetched-via-a-match-to-data-based.
!!Since this technique hinges on '$compile', i have to make sure that the SCOPE of the "ng-repeat's row" gets passed properly into the $compile function.
One template will be the inactive row, and will somehow be set as the default template.
The other template will be the 'active' row with the bindings.

2015-01-25
Hold on:

So... ng-repeat is necessary for display of the ROWS, because (even in row-edit, meh) the numbers of ROWS might change.
  ... ng-repeat is necessary for the display of CELLS, because (even in row-edit), the numbers of CELLS might change.
  ... ng-repeat is necessary for the display of VALUES, because the number of VALUES might change (particularly in row-edit).
Furthermore, 'NG-REPEAT' is the necessary method to display these items because NG-REPEAT implicitly provides a SCOPE by which the child items can be easily rendered.

SO, THERE IS NO WAY FOR ME TO HAVE A FINITE NUMBER OF $WATCHES IN THE EDIT GRID - the number of watches will always grow with 'The Cube'.
- A Single ng-repeat is merely ONE watch, but if you have an Angular component which generates any other kind of $watch inside that repeat, you will then have a number of watches which grows with the number of repeated elements.
- ... and *I* *will* need nested ng-repeats to render the Row -> Cell -> Value structure.
- ... and, I display $watch'd values inside the VALUES, anyways.
So, this means that the only way to ensure that the $DIGEST cycle won't bloat is to enforce limits upon it.
... which means I must limit the number of VALUES in a CELL, and CELLS on a page (by limiting the number of COLUMNS and ROWS, whose product determines the number of CELLS)

>>
The only time when NG-REPEAT is NOT necessary is you are displaying a list which will not change...
(...which, obviously, eliminates the very *consideration* of even using NG-REPEAT in the first place.)
...but even THEN, NG-repeat can still be *useful* in two cases:
1) if the unchanging list is really large, at which point you gain ease-of-coding and neater HTML at the expense of a single $watch, and
2) if exposing a scope will make display of units *inside* of that unchanging list easier.
>>

So...
It seems that VALUE and COLUMN limits, and PAGINATED display of ROWS is the only proper solution to preventing the possibility of a monstrous $DIGEST cycle.

So, I should...
Install COLUMN, VALUE, and ROW limits based upon my stress tests.

